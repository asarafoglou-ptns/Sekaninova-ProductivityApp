}
# Create a dataframe with percentile scores for the selected user
mood_percent_df <- df %>%
group_by(mood_dimension) %>%
mutate(mood_percentile = ecdf(score)(score)) %>%
ungroup() %>%
filter(id == ID)
max_percent_index <- which.max(mood_percent_df$mood_percentile)
max_percent <- mood_percent_df$mood_percentile[max_percent_index] * 100
max_percent_indices <- which(mood_percent_df$mood_percentile == max_percent)
mood_facet <- c()
for (i in max_percent_indices) {
mood_facet <- c(mood_facet, mood_percent_df$mood_dimension[i])
}
mood_facet <- toString(mood_facet)
return(paste(ID, "scores the highest on mood:", mood_facet, "( percentile:",
mood_percentile <- function(ID, df = mood_df_long){
# Throw an error if ID isn't in the dataframe df
if (sum(grepl(ID, df$id)) == 0) {
stop("The ID that you inserted is not in this dataframe.")
}
# Create a dataframe with percentile scores for the selected user
mood_percent_df <- df %>%
group_by(mood_dimension) %>%
mutate(mood_percentile = ecdf(score)(score)) %>%
ungroup() %>%
filter(id == ID)
max_percent_index <- which.max(mood_percent_df$mood_percentile)
max_percent <- mood_percent_df$mood_percentile[max_percent_index] * 100
max_percent_indices <- which(mood_percent_df$mood_percentile == max_percent)
mood_facet <- c()
for (i in max_percent_indices) {
mood_facet <- c(mood_facet, mood_percent_df$mood_dimension[i])
}
mood_facet <- toString(mood_facet)
return(paste(ID, "scores the highest on mood:", mood_facet, "( percentile:",
max_percent, ")"))
}
mood_percentile("al-Galla, Taajuddeen")
mood_percentile <- function(ID, df = mood_df_long){
# Throw an error if ID isn't in the dataframe df
if (sum(grepl(ID, df$id)) == 0) {
stop("The ID that you inserted is not in this dataframe.")
}
# Create a dataframe with percentile scores for the selected user
mood_percent_df <- df %>%
group_by(mood_dimension) %>%
mutate(mood_percentile = ecdf(score)(score) * 100) %>%
ungroup() %>%
filter(id == ID)
max_percent_index <- which.max(mood_percent_df$mood_percentile)
max_percent <- mood_percent_df$mood_percentile[max_percent_index]
max_percent_indices <- which(mood_percent_df$mood_percentile == max_percent)
mood_facet <- c()
for (i in max_percent_indices) {
mood_facet <- c(mood_facet, mood_percent_df$mood_dimension[i])
}
mood_facet <- toString(mood_facet)
return(paste(ID, "scores the highest on mood:", mood_facet, "( percentile:",
max_percent, ")"))
}
mood_percentile("al-Galla, Taajuddeen")
mood_percentile("Walker, Jordan")
df <- read.table("https://raw.githubusercontent.com/elena-sek/PIPS-Week4/main/dataSetExp.txt")
View(df)
?read.table
df <- read.table("https://raw.githubusercontent.com/elena-sek/PIPS-Week4/main/dataSetExp.txt", header = TRUE)
View(df)
nrow(df)
install.packages("explore")
library(explore)
explore(ChickWeight)
explore(combined)
explore(df)
num_participants <- length(unique(df$Subject)) # 40 participants
num_participants
explore(df)
num_learning_trials <- length(unique(df$TrialLearn))
unique(df$TrialLearn)
num_test_trials <- length(unique(df$TrialTest))
explore(df)
conditions <- unique(df$Condition)
cor.test(df$RTrecog, df$Certainty)
cor.test(df$RTrecog, df$Certainty)$cor
ggplot(df, aes(df$RTrecog, df$Certainty)) +
geom_point()
ggplot(df, aes(RTlearn, RTrecog)) +
geom_point()
ggplot(df, aes(Condition, RTrecog)) +
geom_bar()
ggplot(df, aes(RTrecog)) +
geom_bar(aes(fill = Condition))
library(tidyverse)
dataset_A <- read.csv("https://shorturl.at/hlwMZ")
dataset_B <- read.csv("https://shorturl.at/bcKNR")
# Get rid of all rows in dataset A which have more than 15 missing values
dataset_A <- dataset_A %>%
filter(rowSums(is.na(.)) <= 15)
combined <- bind_rows(dataset_A, dataset_B)
# Fill missing age values with mean age from dataset_A
age_mean <- round(mean(dataset_A$age))
combined$age <- ifelse(is.na(combined$age), age_mean, combined$age)
# Remove all users that gave the same funniness rating to all stimuli
combined <- combined %>%
group_by(userid) %>%
filter(!(length(unique(funniness_rating)) == 1)) %>%
ungroup()
combined <- combined %>%
group_by(userid) %>%
slice(1) %>% # Keep one row per userID
ungroup() %>%
select(starts_with("mood_")) %>%
rename_with(~ gsub("mood_", "", .x)) #%>%
combined %>%
cor() %>%
heatmap()
array('exam', dim = c(10, 10, 100))
my_array <- array('exam', dim = c(10, 10, 100))
array("exam", dim = c(10, 10, 100))
cards <- c(as.character(seq(2,10)), c('J', 'Q', 'K', 'A'))
drawn_cards <- c('None', 'None')
while (any(cards != 'A')) {
drawn_cards <- sample(cards, 2, replace=TRUE)
print(drawn_cards)
}
cards <- c(as.character(seq(2,10)), c('J', 'Q', 'K', 'A'))
drawn_cards <- c('None', 'None')
while (any(drawn_cards != 'A')) {
drawn_cards <- sample(cards, 2, replace=TRUE)
print(drawn_cards)
}
?stopifnot
stopifnot(2 == 2, 2 < 4)
stopifnot(2 == 1, 2 < 4)
rmall <- function() {
list_objects <- ls(pos=1)
to_remove <- list_objects[list_objects != 'rmall']
rm(list=to_remove, pos=1)
}
rmall()
x = 3
rmall()
fun_sentence <- c("making", "memes", "in", "R", "is", "fun")
# Original code
fun_nchars <- as.integer(rep(0, length(fun_sentence)))
for (i in 1:length(fun_sentence)) {
fun_nchars[i] <- nchar(fun_sentence[i])
}
fun_nchars <- setNames(fun_nchars, fun_sentence)
fun_nchars
fun_sentence <- c("making", "memes", "in", "R", "is", "fun")
# Original code
fun_nchars <- as.integer(rep(0, length(fun_sentence)))
for (i in 1:length(fun_sentence)) {
fun_nchars[i] <- nchar(fun_sentence[i])
}
?nchar
?sapply
fun_nchars <- sapply(fun_nchars, nchar(fun_sentence))
fun_nchars <- as.integer(rep(0, length(fun_sentence)))
fun_nchars <- sapply(fun_nchars[i], nchar(fun_sentence[i]))
fun_nchars <- sapply(fun_sentence, nchar)
fun_sentence <- c("making", "memes", "in", "R", "is", "fun")
fun_nchars <- sapply(fun_sentence, nchar)
fun_nchars <- setNames(fun_nchars, fun_sentence)
gwen <- "person"
miles <- "person"
peter <- "spider-person"
spider_bite <- function(person) {
peter <- "person"
person <- "spider-person"
gwen <- "spider-person"
return(person)
}
gwen <- spider_bite(gwen)
View(Orange)
df <- Orange %>%
mutate(slice_area = (circumference^2)/(4*pi))
View(df)
df2 <- Orange %>%
group_by(tree) %>%
mutate(slice_area = (circumference^2)/(4*pi)) %>%
ungroup()
df2 <- Orange %>%
group_by(Tree) %>%
mutate(slice_area = (circumference^2)/(4*pi)) %>%
ungroup()
View(df2)
orange_df <- Orange %>%
mutate(slice_area = (circumference^2)/(4*pi))
orange_df <- Orange %>%
mutate(slice_area = (circumference^2)/(4*pi)) %>%
arrange(desc(slice_area))
View(orange_df)
?Orange
while(TRUE){
print( " All work and no play makes Jack a dull boy. ")
}
View(cars)
?cars
good_cars <- cars[cars$speed >= 15 & cars$dist < 40]
good_cars <- cars
good_cars$speed <- good_cars$speed[good_cars$speed >= 15]
good_cars <- good_cars$speed[good_cars$speed >= 15]
good_cars <- cars
View(good_cars)
good_cars <- good_cars$speed[good_cars$speed >= 15]
ggplot(data = Orange, x = age, y = circumference) +
geom_point(colour = Tree) +
geom_smooth(method = lm)
ggplot(data = Orange, x = age, y = circumference) +
geom_point(aes(colour = Tree)) +
geom_smooth(method = lm)
ggplot(data = Orange, aes(x = age, y = circumference)) +
geom_point(aes(colour = Tree)) +
geom_smooth(method = lm)
titanic_data <- titanic::titanic_train
View(titanic_data)
plot(x = titanic_data$Age,
y = titanic_data$Fare,
xlab = "Age of passengers",
ylab = "Passenger fare",
main = "The relationship between Titanic passenger's age and fare")
plot(x = titanic_data$Age,
y = titanic_data$Fare,
xlab = "Age of passengers",
ylab = "Passenger fare",
main = "Scatterplot of Titanic passenger's age and fare")
older_women <- titanic_train %>%
filter((Age >= 55) & (Sex == 'female') ) %>%
select(Name)
library(titanic)
older_women <- titanic_train %>%
filter((Age >= 55) & (Sex == 'female') ) %>%
select(Name)
older_women
older_women <- select(filter(titanic_train, (Age >= 55) & (Sex == 'female')), Name)
older_women
dataset_A <- read.csv("https://shorturl.at/hlwMZ")
dataset_B <- read.csv("https://shorturl.at/bcKNR")
# Get rid of all rows in dataset A which have more than 15 missing values
dataset_A <- dataset_A %>%
filter(rowSums(is.na(.)) <= 15)
library(tidyverse)
# Load data
dataset_A <- read.csv("https://shorturl.at/hlwMZ")
dataset_B <- read.csv("https://shorturl.at/bcKNR")
# Get rid of all rows in dataset A which have more than 15 missing values
dataset_A <- dataset_A %>%
filter(rowSums(is.na(.)) <= 15)
# Plot showing how funny the jokes in dataset B were rated
data.frame(dataset_B) %>%
ggplot() +
geom_col(aes(stimulus, funniness_rating)) +
labs(x = "Jokes", y = "Funniness rating", title = "Joke rating")
combined <- bind_rows(dataset_A, dataset_B)
# Fill missing age values with mean age from dataset_A
age_mean <- round(mean(dataset_A$age))
combined$age <- ifelse(is.na(combined$age), age_mean, combined$age)
# Remove all users that gave the same funniness rating to all stimuli
combined <- combined %>%
group_by(userid) %>%
filter(!(length(unique(funniness_rating)) == 1)) %>%
ungroup()
combined %>%
group_by(age) %>%
summarize(how_funny = mean(funniness_rating)) %>%
ggplot(aes(x = age, y = how_funny)) +
geom_point() +
geom_smooth() +
labs(x = "Age", y = "Average funniness rating")
combined %>%
ggplot(aes(x = age, y = funniness_rating)) +
geom_point() +
geom_smooth() +
labs(x = "Age", y = "Funniness rating")
combined %>%
group_by(userid) %>%
ggplot(aes(x = age, y = funniness_rating)) +
geom_point() +
geom_smooth() +
labs(x = "Age", y = "Funniness rating")
View(combined)
combined %>%
group_by(age) %>%
summarize(how_funny = mean(funniness_rating)) %>%
ggplot(aes(x = age, y = how_funny)) +
geom_point() +
geom_smooth() +
labs(x = "Age", y = "Average funniness rating")
combined %>%
group_by(age) %>%
summarize(how_funny = mean(funniness_rating)) %>%
ggplot(aes(x = age, y = how_funny)) +
geom_point() +
geom_smooth() +
labs(x = "Age", y = "Average funniness rating")
combined %>%
group_by(age) %>%
summarize(how_funny = mean(funniness_rating)) %>%
ungroup() %>%
ggplot(aes(x = age, y = how_funny)) +
geom_point() +
geom_smooth() +
labs(x = "Age", y = "Average funniness rating")
combined <- combined %>%
group_by(userid) %>%
slice(1) %>% # Keep one row per userID
ungroup() %>%
select(starts_with("mood_")) %>%
rename_with(~ gsub("mood_", "", .x)) #%>%
combined %>%
cor() %>%
heatmap()
?heatmap
combined <- combined %>%
group_by(userid) %>%
slice(1) %>% # Keep one row per userID
ungroup() %>%
select(starts_with("mood_")) %>%
rename_with(~ gsub("mood_", "", .x)) #%>%
combined <- bind_rows(dataset_A, dataset_B)
# Fill missing age values with mean age from dataset_A
age_mean <- round(mean(dataset_A$age))
combined$age <- ifelse(is.na(combined$age), age_mean, combined$age)
# Remove all users that gave the same funniness rating to all stimuli
combined <- combined %>%
group_by(userid) %>%
filter(!(length(unique(funniness_rating)) == 1)) %>%
ungroup()
combined <- combined %>%
group_by(userid) %>%
slice(1) %>% # Keep one row per userID
ungroup() %>%
select(starts_with("mood_")) %>%
rename_with(~ gsub("mood_", "", .x)) #%>%
combined %>%
cor() %>%
heatmap(Rowv = NA, Colv = NA)
combined %>%
cor() %>%
heatmap()
combined %>%
cor() %>%
heatmap(Rowv = NA)
combined %>%
cor() %>%
heatmap()
install.packages("corrplot")
library(corrplot)
combined %>%
corrplot(order = 'AOE')
combined %>%
corrplot()
combined %>%
cor() %>%
heatmap(dendrogram = 'none')
?heatmap
combined %>%
cor() %>%
heatmap(keep.dendro = FALSE)
combined %>%
cor() %>%
heatmap(keep.dendro = TRUE)
combined %>%
cor() %>%
heatmap(VERBOSE = FALSE)
combined %>%
cor() %>%
heatmap(verbose = TRUE)
df <- read.table("https://raw.githubusercontent.com/elena-sek/PIPS-Week4/main/dataSetExp.txt", header = TRUE)
View(df)
ggplot(df, aes(RTrecog)) +
geom_bar(aes(fill = Condition))
ggplot(df, aes(x = Hit, y = RTrecog)) +
geom_bar()
ggplot(df, aes(x = Hit, fill = RTrecog)) +
geom_bar()
ggplot(df, aes(x = Hit, y = RTrecog)) +
geom_bar(stat = "identity")
df %>%
group_by(Condition) %>%
summarize(hit_rate = sum(Hit)/length(Hit)) %>%
ggplot() +
geom_bar(aes(Condition, hit_rate), stat = "identity")
df %>%
group_by(Condition) %>%
summarize(mean_RT_recog = mean(RTrecog)) %>%
ggplot() +
geom_bar(aes(Condition, mean_RT_recog), stat = "identity")
ggplot(df, aes(RTrecog, Certainty)) +
geom_point(aes(fill = Condition))
ggplot(df, aes(RTrecog, RTcertain)) +
geom_point(aes(fill = Condition))
ggplot(df, aes(RTrecog, RTcertain)) +
geom_point(aes(fill = Hit))
ggplot(df, aes(x = Hit, y = RTrecog)) +
geom_bar(stat = "identity")
df %>%
group_by(Condition) %>%
summarize(mean_RT_recog = mean(RTrecog)) %>%
ggplot() +
geom_bar(aes(Condition, mean_RT_recog), stat = "identity")
ggplot(df, aes(x = Hit, y = RTrecog)) +
geom_bar(stat = "identity")
df %>%
plot(RTrecog, RTcertain)
df %>%
plot(.RTrecog, .RTcertain)
plot(df$RTrecog, df$RTcertain)
explore(df)
library(explore)
explore(df)
ggplot(df, aes(x = Hit, fill = factor(Certainty, labels = c("No idea", "Quite uncertain", "Quite certain", "Absolutely certain")))) +
geom_bar()
ggplot(df, aes(x = Hit, fill = factor(Certainty, labels = c("No idea", "Quite uncertain", "Quite certain", "Absolutely certain")))) +
geom_bar() +
labs(fill = "Certainty")
ggplot(df, aes(x = Hit, fill = factor(Certainty, labels = c("No idea", "Quite uncertain", "Quite certain", "Absolutely certain")))) +
geom_bar() +
labs(fill = "Certainty") +
scale_fill_brewer(palette="Spectral")
ggplot(df, aes(x = Hit, fill = factor(Certainty, labels = c("No idea", "Quite uncertain", "Quite certain", "Absolutely certain")))) +
geom_bar() +
labs(fill = "Certainty") +
scale_fill_brewer()
ggplot(df, aes(x = Hit, fill = factor(Certainty, labels = c("No idea", "Quite uncertain", "Quite certain", "Absolutely certain")))) +
geom_bar() +
labs(fill = "Certainty") +
scale_fill_brewer() +
theme_minimal()
ggplot(df, aes(x = factor(Hit, levels = c(0, 1)), fill = factor(Certainty, labels = c("No idea", "Quite uncertain", "Quite certain", "Absolutely certain")))) +
geom_bar() +
labs(fill = "Certainty") +
scale_fill_brewer() +
theme_minimal()
ggplot(df, aes(x = factor(Hit, levels = c(0, 1)), fill = factor(Certainty, labels = c("No idea", "Quite uncertain", "Quite certain", "Absolutely certain")))) +
geom_bar() +
labs(x = "Hit", fill = "Certainty") +
scale_fill_brewer() +
theme_minimal()
ggplot(df, aes(x = factor(Hit, levels = c(0, 1)), fill = factor(Certainty, labels = c("Very uncertain", "Rather uncertain", "Rather certain", "Very certain")))) +
geom_bar() +
labs(x = "Hit", fill = "Certainty") +
scale_fill_brewer() +
theme_minimal()
ggplot(df, aes(x = factor(Hit, levels = c(0, 1)),
fill = factor(Certainty, labels = c("Very uncertain",
"Rather uncertain",
"Rather certain",
"Very certain")))) +
geom_bar() +
labs(x = "Hit", fill = "Certainty") +
scale_fill_brewer() +
theme_minimal()
library(lmerTest)
df <- df[df$LearnChosenInOptions == 1,]
fit = glmer(Hit ~ (1|Subject) + Condition * Correct, df, family = binomial)
library(car)
fit = glmer(Hit ~ (1|Subject) + Condition * Correct, df, family = binomial)
install.packages("Matrix")
library(Matrix)
install.packages("Matrix")
library(Matrix)
fit = glmer(Hit ~ (1|Subject) + Condition * Correct, df, family = binomial)
library(tidyverse)
library(lme4)
df <- read.table("https://raw.githubusercontent.com/elena-sek/PIPS-Week4/main/dataSetExp.txt", header = TRUE)
df <- df[df$LearnChosenInOptions == 1,]
fit = glmer(Hit ~ (1|Subject) + Condition * Correct, df, family = binomial)
oo <- options(repos = "https://cran.r-project.org/")
install.packages("Matrix")
install.packages("lme4")
options(oo)
install.packages("Matrix")
install.packages("lme4")
fit = glmer(Hit ~ (1|Subject) + Condition * Correct, df, family = binomial)
library(lme4)
library(Matrix)
library(lme4)
fit = glmer(Hit ~ (1|Subject) + Condition * Correct, df, family = binomial)
Anova(fit)
aov(fit)
library(car)
Anova(fit)
df$Delay <- 0
df[df$Subject<21,"Delay"] <- -0.5
df[df$Subject>20,"Delay"] <- 0.5
fit <- glmer(Hit ~ (1|Subject) + Condition * Correct * Delay, df, family = binomial)
Anova(fit)
getwd()
install.packages('PsySys')
?install.packages
remotes::install_github("Programming-The-Next-Step-2023/NutriMeter")
install.packages('remotes')
remotes::install_github("Programming-The-Next-Step-2023/NutriMeter")
library(NutriMeter)
runNutrimeterApp()
setwd("C:/Users/Elenka/OneDrive - UvA/ResMas/SEMESTER 2/Programming The Next Step")
install.packages('devtools')
install.packages('roxygen2')
install.packages('usethis')
library(devtools)
library(roxygen2)
library(usethis)
devtools::create('ProductivityApp')
setwd("C:/Users/Elenka/OneDrive - UvA/ResMas/SEMESTER 2/Programming The Next Step/ProductivityApp")
usethis::use_ccby_license()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
