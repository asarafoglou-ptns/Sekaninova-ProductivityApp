}
})
}
})
# Start and pause buttons (continue button when user presses Pause)
observeEvent(input$start_timer, {timer_on(TRUE)})
observeEvent(input$pause_timer, {
timer_on(FALSE)
updateActionButton(session, "start_timer", label = "Continue", icon = icon("play"))})
# Task Completed button â†’ cross off completed tasks
observeEvent(input$task_done, {
timer_on(FALSE)
selected_task_index <- input$pomodoro_todolist_rows_selected
todolist_update <- pomodoro_todolist()
if (!is.null(selected_task_index)) {
todolist_update$Task[selected_task_index] <- paste(todolist_update$Task[selected_task_index], '\u2705')
pomodoro_todolist(todolist_update)
elapsed_time(0)
selected_task(selected_task_index + 1)
}
output$task_message <- renderText("Good job! You've successfully completed your task!")
})
# Render timer
output$timer <- renderText({
time_left <- timer()
sprintf("%02d:%02d", time_left %/% 60, time_left %% 60)
})
# Task selection
observeEvent(input$pomodoro_todolist_rows_selected, {
selected_task(input$pomodoro_todolist_rows_selected)
})
# PRODUCTIVITY REPORT TAB ----------------------------------------------------
}
# Run the application
shinyApp(ui = ui, server = server)
my_df <- data.frame(
Task = c("Meeting preparation", "Programming", "Watch lecture recording"),
Estimated_duration = c(30, 120, 90),
Actual_duration = c(41, 200, 85)
)
# Reshape the dataframe manually
my_df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Plot using ggplot2
library(ggplot2)
ggplot(my_df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = "Tasks", title = "Estimated vs Actual Duration")
ggplot(my_df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
geom_segment(aes(x = Estimated_duration, xend = Actual_duration, y = Task, yend = Task), color = "grey") +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = "Tasks", title = "Estimated vs Actual Duration")
my_df <- data.frame(
Task = c("Meeting preparation", "Programming", "Watch lecture recording"),
Estimated_duration = c(30, 120, 90),
Actual_duration = c(41, 200, 85)
)
# Reshape the dataframe manually
my_df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Plot using ggplot2
library(ggplot2)
ggplot(my_df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
geom_segment(aes(x = Estimated_duration, xend = Actual_duration, y = Task, yend = Task), color = "grey") +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = "Tasks", title = "Estimated vs Actual Duration")
# Create the dataframe
my_df <- data.frame(
Task = c("Meeting preparation", "Programming", "Watch lecture recording"),
Estimated_duration = c(30, 120, 90),
Actual_duration = c(41, 200, 85)
)
# Reshape the dataframe manually
my_df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Plot using ggplot2
library(ggplot2)
ggplot(my_df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
geom_segment(aes(x = Estimated_duration, xend = Actual_duration, y = Task, yend = Task), color = "grey") +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = "Tasks", title = "Estimated vs Actual Duration")
# Create the dataframe
my_df <- data.frame(
Task = c("Meeting preparation", "Programming", "Watch lecture recording"),
Estimated_duration = c(30, 120, 90),
Actual_duration = c(41, 200, 85)
)
# Reshape the dataframe manually
my_df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Plot using ggplot2
library(ggplot2)
ggplot(my_df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
geom_segment(aes(x = Duration, xend = ifelse(Type == "Estimated_duration", Estimated_duration, Actual_duration),
y = Task, yend = Task), color = "grey") +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = "Tasks", title = "Estimated vs Actual Duration") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),  # Title size
axis.title = element_text(size = 16, face = "bold"),  # Axis labels size
axis.text = element_text(size = 16, face = "bold"),  # Axis tick labels size
panel.border = element_rect(colour = "black", fill = NA, size = 1.5)
)
# Create the dataframe
my_df <- data.frame(
Task = c("Meeting preparation", "Programming", "Watch lecture recording"),
Estimated_duration = c(30, 120, 90),
Actual_duration = c(41, 200, 85)
)
# Reshape the dataframe manually
my_df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Plot using ggplot2
library(ggplot2)
ggplot(my_df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = "Tasks", title = "Estimated vs Actual Duration") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),  # Title size
axis.title = element_text(size = 16, face = "bold"),  # Axis labels size
axis.text = element_text(size = 16, face = "bold"),  # Axis tick labels size
panel.border = element_rect(colour = "black", fill = NA, size = 1.5)
)
# Create the dataframe
my_df <- data.frame(
Task = c("Meeting preparation", "Programming", "Watch lecture recording"),
Estimated_duration = c(30, 120, 90),
Actual_duration = c(41, 200, 85)
)
# Reshape the dataframe manually
my_df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Plot using ggplot2
library(ggplot2)
ggplot(my_df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", title = "Estimated vs Actual Duration") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),  # Title size
axis.title = element_text(size = 16, face = "bold"),  # Axis labels size
axis.text = element_text(size = 16, face = "bold"),  # Axis tick labels size
panel.border = element_rect(colour = "black", fill = NA, size = 1.5)
)
# Create the dataframe
my_df <- data.frame(
Task = c("Meeting preparation", "Programming", "Watch lecture recording"),
Estimated_duration = c(30, 120, 90),
Actual_duration = c(41, 200, 85)
)
# Reshape the dataframe manually
my_df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Plot using ggplot2
library(ggplot2)
ggplot(my_df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = " ", title = "Estimated vs Actual Duration") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),  # Title size
axis.title = element_text(size = 16, face = "bold"),  # Axis labels size
axis.text = element_text(size = 16, face = "bold"),  # Axis tick labels size
panel.border = element_rect(colour = "black", fill = NA, size = 1.5)
)
get_productivity_plot <- function(df){
# Long data frame for easier plotting
df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Productivity plot
ggplot(df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = "Tasks", title = "Productivity Plot") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),  # Title size
axis.title = element_text(size = 16, face = "bold"),  # Axis labels size
axis.text = element_text(size = 16, face = "bold"),  # Axis tick labels size
panel.border = element_rect(colour = "black", fill = NA, size = 1.5)
)
}
get_productivity_plot(my_df)
get_productivity_plot <- function(df){
# Long data frame for easier plotting
df_long <- data.frame(
Task = rep(my_df$Task, 2),
Type = c(rep("Estimated_duration", nrow(my_df)), rep("Actual_duration", nrow(my_df))),
Duration = c(my_df$Estimated_duration, my_df$Actual_duration)
)
# Productivity plot
ggplot(df_long, aes(x = Duration, y = Task, color = Type)) +
geom_point(size = 3) +
scale_color_manual(values = c("Estimated_duration" = "blue", "Actual_duration" = "red")) +
labs(x = "Time (minutes)", y = " ", title = "Productivity Plot") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),  # Title size
axis.title = element_text(size = 16, face = "bold"),  # Axis labels size
axis.text = element_text(size = 16, face = "bold"),  # Axis tick labels size
panel.border = element_rect(colour = "black", fill = NA, size = 1.5)
)
}
get_productivity_plot(my_df)
devtools::document()
# My shiny Productivity App
# Created by: Elena SekaninovÃ¡
#
library(ProductivityApp)
library(shiny)
library(shinyWidgets)
library(DT)
library(tidyverse)
# Define UI for the app
ui <- fluidPage(
tags$head(
# Adjust fonts, margins, buttons, sliding bars, etc.
tags$link(rel = "stylesheet", href = "https://fonts.googleapis.com/css2?family=Oswald:wght@500&display=swap"),
tags$style(HTML("
.title {
font-family: 'Oswald', sans-serif;
font-size: 2.2em;
margin-bottom: 20px;
}
.btn {
background-color: black;
border-color: black;
color: white;
box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
}
.js-range-slider {
background-color: black; /* Black track */
border-color: black;     /* Black border */
color: white;            /* White text */
}
.irs-bar {
background-color: black !important; /* Black bar */
border-color: black !important;     /* Black border */
}
.irs-bar-edge {
background-color: black !important; /* Black edge */
border-color: black !important;     /* Black border */
}
.irs-line {
background-color: black !important; /* Black line */
border-color: black !important;     /* Black border */
}
.irs-grid-text {
color: black !important;            /* Black grid text */
}
.irs-grid-pol {
background-color: black !important; /* Black grid line */
border-color: black !important;     /* Black border */
}
.irs-min, .irs-max, .irs-from, .irs-to, .irs-single {
background-color: black !important; /* Black text background */
color: white !important;            /* White text */
}
.timer-box {
background-color: black;
color: white;
padding: 20px;
font-size: 48px;
text-align: center;
border-radius: 10px;
box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.5);
margin: 20px 0;
}
.completed-task {
color: rgb(211,211,211);
text-decoration: line-through;
}
"))
),
# Application title
titlePanel(title = div("Productivity App", class = "title")),
# Navigation bar with tabs
navbarPage("",
tabPanel("About",
fluidRow(
column(8, offset = 0.7,
h3("Welcome to the Productivity App!"),
p("This app is designed to help you manage your tasks efficiently using various productivity techniques."),
br(),
h4("How to Use the App:"),
p("1. ", strong("To-Do List:"), " This section allows you to add tasks, specify their duration, urgency, importance, and enjoyability. You can also generate a prioritized to-do list based on your preferences."),
p("2. ", strong("Pomodoro:"), " A timer to help you manage your work sessions using the Pomodoro technique."),
p("3. ", strong("Productivity Report:"), " Get insights into your productivity based on the tasks you have completed."),
br(),
h4("Steps to Add and Prioritize Tasks:"),
p("1. ", strong("Add Tasks:"), " Enter the task details including the task name, duration, urgency, importance, and enjoyability."),
p("2. ", strong("Generate To-Do List:"), " Set your preferences for starting with short tasks or less enjoyable tasks and click on 'Get the To-Do List' button to generate a prioritized list."),
p("3. ", strong("Download Tasks:"), " You can download your tasks as a CSV file for future reference."),
p("4. ", strong("View Eisenhower Matrix:"), " Visualize your tasks in the Eisenhower Matrix to see their urgency and importance."),
br(),
h4("Pomodoro Technique:"),
p("Use the Pomodoro timer to break your work into intervals, traditionally 25 minutes in length, separated by short breaks. This can help improve focus and productivity.")
)
)
),
tabPanel("To-Do List",
fluidRow(
column(3,
h4("Add your tasks:", class = "title"),
textInput("task", "Task:", ""),
numericInput("duration", "Duration (in mins):", value = NULL),
sliderInput("urgency", "Urgency:", min = 1, max = 4, value = 2, step = 1),
sliderInput("importance", "Importance:", min = 1, max = 4, value = 2, step = 1),
sliderInput("enjoyable", "How enjoyable:", min = 1, max = 3, value = 2, step = 1),
actionButton("insert", "Insert"),
tags$div(style = "height: 20px;"),
fileInput("upload", "Or upload a csv file with your tasks:", accept = ".csv")
),
column(5,
h4("Overview of your tasks:", class = "title"),
DTOutput("taskTable"),
downloadButton("downloadData", "Download CSV"),
tags$div(style = "height: 20px;"),
plotOutput("eisenhowerPlot")
),
column(3, offset = 1,
h4("To-Do list preferences:", class = "title"),
numericInput("time_available", "How much time you have (in mins):", value = NULL),
timeInput("start_time", "Enter start time:", value = "13:00"),
checkboxInput("short_tasks", "Start with tasks that take less than 5 mins:", value = TRUE),
checkboxInput("least_enjoyable", "Start with the least enjoyable tasks:", value = TRUE),
actionButton("generate_list", "Get the To-Do List"),
tags$div(style = "height: 20px;"), # br(),
h4("Your To-Do List:", class = "title"),
DTOutput("todolist")
)
)
),
tabPanel("Pomodoro",
fluidRow(
column(3,
h4("To-Do List:", class = "title"),
DTOutput("pomodoro_todolist")
),
column(3, offset = 1,
h4("Pomodoro Timer", class = "title"),
div(textOutput("timer"), class = "timer-box"),
actionButton("start_timer", "Start", icon = icon("play")),
actionButton("pause_timer", "Pause", icon = icon("pause")),
actionButton("task_done", "Task Completed", icon = icon("circle-check")),
tags$div(style = "height: 20px;"),
textOutput("task_message")
)
)
),
tabPanel("Productivity Report",
h4("Productivity Report", class = "title"),
plotOutput("productivity_plot")
)
)
)
server <- function(input, output, session) {
# TO-DO LIST TAB -------------------------------------------------------------
# Reactive data frame to store tasks
tasks <- reactiveVal(create_empty_task_df())
# Insert a task
observeEvent(input$insert, add_task(tasks, input$task, input$duration, input$importance, input$urgency, input$enjoyable))
# Task table
output$taskTable <- renderDT({
datatable(tasks(), options = list(pageLength = 5, lengthMenu = list(c(5, 10), c('5', '10'))))
})
# Uploading task csv
observeEvent(input$upload, {
req(input$upload) # a file has to be uploaded
tasks_data <- read.csv(input$upload$datapath)
tasks(tasks_data) # Replace existing tasks with the uploaded tasks
})
# Downloading task csv
output$downloadData <- downloadHandler(
filename = function() {
paste("tasks-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(tasks(), file, row.names = FALSE)
}
)
# Eisenhower matrix
output$eisenhowerPlot <- renderPlot(generate_eisenhower_matrix(df=tasks()))
# To-Do List
observeEvent(input$generate_list, {
todolist <- generate_todolist(tasks(), start_enjoy = input$least_enjoyable, start_short = input$short_tasks, start_time = input$start_time, available_time = input$time_available)
output$todolist <- renderDT({
datatable(todolist,
selection = "none",
rownames = FALSE,
options = list(lengthChange = FALSE,
searching = FALSE,
paging = FALSE,
info = FALSE,
ordering = FALSE))
})
})
# POMODORO TAB ---------------------------------------------------------------
pomodoro_duration <- 0.1 #Adjust if you want to test this tab
pomodoro_duration_sec <- pomodoro_duration * 60
# Reactive values for the pomodoro to-do list, timer and the selected task
pomodoro_todolist <- reactiveVal(create_empty_task_df())
timer <- reactiveVal(pomodoro_duration_sec)
timer_on <- reactiveVal(FALSE)
selected_task <- reactiveVal(1)
elapsed_time <- reactiveVal(0)
# Pomodoro to-do list generated when the user presses the 'Get the To-Do List' button
observeEvent(input$generate_list, {
pomodoro_tdl <- generate_todolist(tasks(), start_enjoy = input$least_enjoyable, start_short = input$short_tasks, start_time = input$start_time, available_time = input$time_available, show_intervals = FALSE)
pomodoro_tdl$`Time spent on task` <- NA
pomodoro_todolist(pomodoro_tdl)
output$pomodoro_todolist <- renderDT({
datatable(pomodoro_todolist(),
selection = list(mode = "single", selected = selected_task()),
rownames = FALSE,
options = list(lengthChange = FALSE,
searching = FALSE,
paging = FALSE,
info = FALSE,
ordering = FALSE),
)
})
})
# Update the pomodoro timer every second if it's active
observe({
invalidateLater(1000, session)
if (timer_on()) {
isolate({
time_left <- timer()
if (time_left > 0) {
timer(time_left - 1)
} else {
timer_on(FALSE)
selected_task_index <- selected_task()
new_todolist <- pomodoro_todolist()
current_time <- new_todolist[selected_task_index, "Time spent on task"]
current_time <- ifelse(is.na(current_time), 0, current_time)
new_todolist[selected_task_index, "Time spent on task"] <- current_time + pomodoro_duration
pomodoro_todolist(new_todolist)
timer(pomodoro_duration_sec) # Reset the timer after the pomodoro is done
updateActionButton(session, "start_timer", label = "Start", icon = icon("play")) # This is not working, the Start button is still gray
}
})
}
})
# Start and pause buttons (continue button when user presses Pause)
observeEvent(input$start_timer, {timer_on(TRUE)})
observeEvent(input$pause_timer, {
timer_on(FALSE)
updateActionButton(session, "start_timer", label = "Continue", icon = icon("play"))})
# Task Completed button â†’ add a check mark to the completed task
observeEvent(input$task_done, {
timer_on(FALSE)
selected_task_index <- input$pomodoro_todolist_rows_selected
todolist_update <- pomodoro_todolist()
if (!is.null(selected_task_index)) {
todolist_update$Task[selected_task_index] <- paste('\u2705', todolist_update$Task[selected_task_index])
pomodoro_todolist(todolist_update)
elapsed_time(0)
selected_task(selected_task_index + 1)
}
output$task_message <- renderText("Good job! You've successfully completed your task!")
})
# Render timer
output$timer <- renderText({
time_left <- timer()
sprintf("%02d:%02d", time_left %/% 60, time_left %% 60)
})
# Task selection
observeEvent(input$pomodoro_todolist_rows_selected, {
selected_task(input$pomodoro_todolist_rows_selected)
})
# PRODUCTIVITY REPORT TAB ----------------------------------------------------
example_df <- data.frame(Task = c("Meeting preparation", "Programming", "Watch lecture recording"), Estimated_duration = c(30, 120, 90), Actual_duration = c(41, 200, 85))
output$productivity_plot <- renderPlot(get_productivity_plot(example_df))
}
# Run the application
shinyApp(ui = ui, server = server)
